using Microsoft.EntityFrameworkCore;
using Palladin.Data.Entity;
using Palladin.Data.EntityFramework;
using Palladin.Data.Repository.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Palladin.Data.Repository.PublicRepository
{
    internal class VulnerabilityRepository : Repository<VulnerabilityEntity>, IVulnerabilityRepository, IDisposable
    {
        public PalladinContext Context
        {
            get { return _context as PalladinContext; }
        }

        public VulnerabilityRepository() : base(null) { }
        public VulnerabilityRepository(PalladinContext ctx) : base(ctx) { }

        public IEnumerable<string> GetCountLanguageByVultId(Guid id)
        {
            return this.GetById(id).Vulnerabilities.Select(x => Enum.GetName(x.LanguageType.GetType(), x.LanguageType));
        }

        public IEnumerable<VulnerabilityEntity> GetVulnerabilityWithChilds()
        {
             return from v in _context.Set<VulnerabilityEntity>()
                   join u in _context.Set<UserEntity>() on v.UserId equals u.Id
                   orderby v.CreatedDate descending
                   orderby v.Name descending
                   select new VulnerabilityEntity()
                   {
                       Id = v.Id,
                       Name = v.Name,
                       ProjectType = v.ProjectType,
                       RiskFactor = v.RiskFactor,
                       Vulnerabilities = v.Vulnerabilities,
                       User = new UserEntity() { Login = u.Login },
                       CreatedDate = v.CreatedDate
                   };
        }

        public IEnumerable<VulnerabilityEntity> GetVulnerabilityWithChilds(int skip, int take)
        {
            return (from v in _context.Set<VulnerabilityEntity>()
                   join u in _context.Set<UserEntity>() on v.UserId equals u.Id
                   orderby v.CreatedDate descending
                   orderby v.Name descending
                   select new VulnerabilityEntity()
                   {
                       Id = v.Id,
                       Name = v.Name,
                       ProjectType = v.ProjectType,
                       RiskFactor = v.RiskFactor,
                       Vulnerabilities = v.Vulnerabilities,
                       User = new UserEntity() { Login = u.Login },
                       CreatedDate = v.CreatedDate
                   })
                   .Skip(skip)
                   .Take(take);
        }

        public IEnumerable<VulnerabilityEntity> GetVulnerabilityWithChilds(string name)
        {
            return from v in _context.Set<VulnerabilityEntity>()
                   join u in _context.Set<UserEntity>() on v.UserId equals u.Id
                   where v.Name.Contains(name)
                   orderby v.CreatedDate descending
                   orderby v.Name descending
                   select new VulnerabilityEntity()
                   {
                       Id = v.Id,
                       Name = v.Name,
                       ProjectType = v.ProjectType,
                       RiskFactor = v.RiskFactor,
                       Vulnerabilities = v.Vulnerabilities,
                       User = new UserEntity() { Login = u.Login },
                       CreatedDate = v.CreatedDate
                   };
        }

        public override IEnumerable<VulnerabilityEntity> GetAll(int skip, int take)
        {
            return this._context.Set<VulnerabilityEntity>()
                                .OrderByDescending(x => x.CreatedDate)
                                .OrderByDescending(x => x.Name)
                                .Skip(skip)
                                .Take(take);
        }

        public void Dispose()
        {
            this._context.Dispose();
            GC.SuppressFinalize(this);
        }
    }
}
