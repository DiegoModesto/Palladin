using AutoMapper;
using Palladin.Data.Entity;
using Palladin.Data.Repository;
using Palladin.Data.Repository.PublicRepository;
using Palladin.Services.LogicService.Interfaces;
using Palladin.Services.ViewModel.Vulnerability;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Palladin.Services.LogicService.VulnerabilityLogic
{
    public class VulnerabilityLogic : BaseLogic, IVulnerabilityLogic, IBaseLogic
    {
        private IMapper _mapp;
        public VulnerabilityLogic(IMapper map)
        {
            this._mapp = map;
        }

        public VulnerabilityViewModel GetDetailVulnerabilityById(Guid id)
        {
            using (var uow = new UnitOfWork(ConnectionString))
            {
                var vulnerability = uow._vulnerabilityR.GetById(id);

                if (vulnerability != null)
                {
                    var vultDetail = this._mapp.Map<VulnerabilityEntity, VulnerabilityViewModel>(vulnerability);
                    var langs = uow._vulnerabilityLangR.Find(x => x.VulnerabilityId.Equals(vultDetail.Id));

                    vultDetail.Languages = this._mapp.Map<IEnumerable<VulnerabilityLangEntity>, IEnumerable<VulnerabilityLangViewModel>>(langs);
                    return vultDetail;
                }
                    
                 
                throw new Exception("Houve um problema na pesquisa das vulnerabilidades.");
            }
        }

        public IEnumerable<VulnerabilitySimpleListViewModel> GetVulnerabilitiesGeneralList()
        {
            using (var uow = new UnitOfWork(ConnectionString))
            {
                var ret = new List<VulnerabilitySimpleListViewModel>();

                var vulnerabilities = uow._vulnerabilityR.GetVulnerabilityWithChilds();
                if (vulnerabilities != null)
                {
                    foreach (var vulnerability in vulnerabilities)
                    {
                        var vult = this._mapp.Map<VulnerabilityEntity, VulnerabilitySimpleListViewModel>(vulnerability);
                        vult.UserName = vulnerability.User.Login;
                        if (vulnerability.Vulnerabilities.Count() > 0)
                            vult.Languages = vulnerability.Vulnerabilities.Select(x => Enum.GetName(typeof(Enums.LangType), x.LanguageType));

                        ret.Add(vult);
                    }

                    return ret;
                }

                throw new Exception("Nenhuma vulnerabilidade cadastrada.");
            }
        }

        public IEnumerable<VulnerabilitySimpleListViewModel> GetVulnerabilitiesGeneralList(int page)
        {
            if (page == 0)
                throw new Exception("Este item é paginado.");

            using (var uow = new UnitOfWork(ConnectionString))
            {
                var ret = new List<VulnerabilitySimpleListViewModel>();
                //1
                var skip = (page > 1 ?page * 10 : 0);

                var vulnerabilities = uow._vulnerabilityR.GetVulnerabilityWithChilds(skip, 10);
                if (vulnerabilities != null)
                {
                    foreach (var vulnerability in vulnerabilities)
                    {
                        var vult = this._mapp.Map<VulnerabilityEntity, VulnerabilitySimpleListViewModel>(vulnerability);
                        vult.UserName = vulnerability.User.Login;
                        if (vulnerability.Vulnerabilities.Count() > 0)
                            vult.Languages = vulnerability.Vulnerabilities.Select(x => Enum.GetName(typeof(Enums.LangType), x.LanguageType));

                        ret.Add(vult);
                    }

                    return ret;
                }

                throw new Exception("Nenhuma vulnerabilidade cadastrada.");
            }
        }

        public IEnumerable<VulnerabilitySimpleListViewModel> GetVulnerabilitiesGeneralList(string name)
        {
            using (var uow = new UnitOfWork(ConnectionString))
            {
                var ret = new List<VulnerabilitySimpleListViewModel>();

                var vulnerabilities = uow._vulnerabilityR.GetVulnerabilityWithChilds(name);
                if (vulnerabilities != null)
                {
                    foreach (var vulnerability in vulnerabilities)
                    {
                        var vult = this._mapp.Map<VulnerabilityEntity, VulnerabilitySimpleListViewModel>(vulnerability);
                        vult.UserName = vulnerability.User.Login;
                        if (vulnerability.Vulnerabilities.Count() > 0)
                            vult.Languages = vulnerability.Vulnerabilities.Select(x => Enum.GetName(typeof(Enums.LangType), x.LanguageType));

                        ret.Add(vult);
                    }

                    return ret;
                }

                throw new Exception("Nenhuma vulnerabilidade cadastrada.");
            }
        }

        public void CreateVulnerability(VulnerabilityViewModel model)
        {
            using (var uow = new UnitOfWork(ConnectionString))
            {
                var vulnerabilityId = Guid.NewGuid();
                var vulnerability = this._mapp.Map<VulnerabilityViewModel, VulnerabilityEntity>(model);
                var vulnerabilitiesLang = this._mapp.Map<IEnumerable<VulnerabilityLangViewModel>, IEnumerable<VulnerabilityLangEntity>>(model.Languages);

                vulnerability.Id = vulnerabilityId;

                uow._vulnerabilityR.Add(vulnerability);
                if(uow.Complete() > 0)
                {
                    foreach (var vulnerabilityLang in vulnerabilitiesLang)
                    {
                        vulnerabilityLang.VulnerabilityId = vulnerabilityId;
                    }
                    uow._vulnerabilityLangR.AddRange(vulnerabilitiesLang);
                    uow.Complete();
                }
                else
                {
                    throw new Exception("Houve um erro ao processar a vulnerabilidade. Tente novamente.");
                }
                
            }
        }

        public void UpdateVulnerability(VulnerabilityViewModel model)
        {
            using(var uow = new UnitOfWork(ConnectionString))
            {
                //Mapeamentos
                var vulnerabilityLangEntity = this._mapp.Map<IEnumerable<VulnerabilityLangViewModel>, IEnumerable<VulnerabilityLangEntity>>(model.Languages);

                //Originais do banco
                var dbVultEntity = uow._vulnerabilityR.GetById(model.Id);
                if (dbVultEntity == null)
                    throw new Exception("Vulnerabilidade não encontrada.");

                //Preenchendo a entidade pai
                dbVultEntity.Name = string.IsNullOrWhiteSpace(model.Name)
                    ? dbVultEntity.Name
                    : model.Name;
                dbVultEntity.CVSS = string.IsNullOrWhiteSpace(model.CVSS)
                    ? dbVultEntity.CVSS
                    : model.CVSS;
                dbVultEntity.ProjectType = string.IsNullOrWhiteSpace(model.ProjectType)
                    ? dbVultEntity.ProjectType
                    : (Enums.ProjType)Enum.Parse(typeof(Enums.ProjType), model.ProjectType, true);
                dbVultEntity.RiskFactor = string.IsNullOrWhiteSpace(model.RiskFactorType)
                    ? dbVultEntity.RiskFactor
                    : (Enums.RiskFactor)Enum.Parse(typeof(Enums.RiskFactor), model.RiskFactorType, true);
                dbVultEntity.References = model.References.Count() == 0
                    ? ""
                    : string.Join(",", model.References);
                dbVultEntity.Tags = model.Tags.Count() == 0
                    ? ""
                    : string.Join(",", model.Tags);

                //Atualizando Vulnerability
                uow._vulnerabilityR.Update(dbVultEntity);
                //Atualizando VulnerabilityLang
                uow._vulnerabilityLangR.UpdateRange(vulnerabilityLangEntity);

                uow.Complete();
            }
        }

        public void RemoveById(Guid id)
        {
            using(var uow = new UnitOfWork(ConnectionString))
            {
                var vultChilds = uow._vulnerabilityLangR.Find(x => x.VulnerabilityId.Equals(id));
                uow._vulnerabilityLangR.RemoveRange(vultChilds);
                uow._vulnerabilityR.Remove(id);

                uow.Complete();
            }
        }
    }
}
