using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Palladin.Presentation.API.Helpers;
using Palladin.Services.LogicService.VulnerabilityLogic;
using Palladin.Services.ViewModel;
using Palladin.Services.ViewModel.Vulnerability;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;

namespace Palladin.Presentation.API.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private IVulnerabilityLogic _vulnerabilityService { get; }
        private readonly AppSettings _appSettings;

        public VulnerabilityController(IVulnerabilityLogic vulnerability, IOptions<AppSettings> appSettings)
        {
            this._vulnerabilityService = vulnerability;
            this._appSettings = appSettings.Value;

            this._vulnerabilityService.ConnectionString = this._appSettings.ConString;
        }

        [HttpGet("getList")]
        public IActionResult GetAllGeneralList(int page)
        {
            try
            {
                return Ok(new ResultResponseViewModel<IEnumerable<VulnerabilitySimpleListViewModel>>
                {
                    IsSuccess = true,
                    Response = page == 0 
                                        ? this._vulnerabilityService.GetVulnerabilitiesGeneralList()
                                        : this._vulnerabilityService.GetVulnerabilitiesGeneralList(page)
                });

            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = e.Message, Response = string.Empty });
            }
        }

        [HttpGet("search")]
        public IActionResult GetAllWithNameContent(string name)
        {
            try
            {
                return Ok(new ResultResponseViewModel<IEnumerable<VulnerabilitySimpleListViewModel>>
                {
                    IsSuccess = true,
                    Response = this._vulnerabilityService.GetVulnerabilitiesGeneralList(name)
                });

            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = e.Message, Response = string.Empty });
            }
        }

        [HttpGet("getById")]
        public IActionResult GetById(Guid id)
        {
            try
            {
                return Ok(new ResultResponseViewModel<VulnerabilityViewModel>
                {
                    IsSuccess = true,
                    Response = this._vulnerabilityService.GetDetailVulnerabilityById(id)
                });
            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = e.Message, Response = string.Empty });
            }
        }

        [HttpPost("edit")]
        public IActionResult EditVulnerabilityByObject([FromBody]VulnerabilityViewModel model)
        {
            try
            {
                this._vulnerabilityService.UpdateVulnerability(model);

                return Ok(new ResultResponseViewModel<VulnerabilityViewModel>
                {
                    IsSuccess = true,
                    Message = "Dados atualizados com sucesso."
                });
            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = e.Message, Response = string.Empty });
            }
        }

        [HttpPost("add")]
        public IActionResult CreateVulnerabilityByObject([FromBody]VulnerabilityViewModel model)
        {
            try
            {
                var token = Request.Headers["Authorization"].ToString().Replace("Bearer ", "");
                var handler = new JwtSecurityTokenHandler();

                model.UserId = Guid.Parse(handler.ReadJwtToken(token).Claims.ToList().Find(x => x.Type.Contains("nameidentifier")).Value);

                this._vulnerabilityService.CreateVulnerability(model);

                return Ok(new ResultResponseViewModel<VulnerabilityViewModel>
                {

                    IsSuccess = true,
                    Message = "Vulnerabilidade criada com sucesso."
                });
            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = e.Message, Response = string.Empty });
            }
        }

        [HttpGet("remove")]
        public IActionResult RemoveById(Guid id)
        {
            try
            {
                this._vulnerabilityService.RemoveById(id);
                return Ok(new ResultResponseViewModel<VulnerabilityViewModel> { IsSuccess = true, Message = "Vulnerabilidade removida com sucesso." });
            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = e.Message, Response = string.Empty });
            }
        }

        [HttpGet("gettypeAhead")]
        public IActionResult GetTypeAheadList(string type)
        {
            try
            {
                return Ok(new ResultResponseViewModel<IEnumerable<TypeAheadVulnerabilityViewModel>>
                {
                    IsSuccess = true,
                    Response = this._vulnerabilityService.GetTypeAheadList(type)
                });
            }
            catch (Exception e)
            {
                return Ok(new ResultResponseViewModel<string>() { IsSuccess = false, Message = "Não foi possível listar os projetos, tente novamente mais tarde ou contate o adminsitrador.", Response = e.Message });
            }
        }
    }
}